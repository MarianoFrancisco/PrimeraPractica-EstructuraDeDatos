/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.practica1estructura.frame;

import static com.mycompany.practica1estructura.controladores.MovilizadorDatos.movilizar;
import static com.mycompany.practica1estructura.controladores.MovilizadorServicios.movilizarServicios;
import static com.mycompany.practica1estructura.frame.Inicio.apostadores;
import com.mycompany.practica1estructura.lectura_archivo.ReescribirArchivo;
import com.mycompany.practica1estructura.objeto.OrdenCarrera;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Mariano
 */

public class SeleccionarOrdenApuesta extends javax.swing.JFrame {

    /**
     * Creates new form SeleccionarOrdenApuesta
     */
    File archivo;
    FileWriter subirResultados = null;
    BufferedWriter leerApuestaR = null;
    PrintWriter imprimirArchivo;
    public static OrdenCarrera[] ordenDeCarrera=new OrdenCarrera[1];
    FondoInicio seleccionApuesta = new FondoInicio();//Creamos un nuevo fondo
    public SeleccionarOrdenApuesta() {
        this.setContentPane(seleccionApuesta);//Realizamos la pintada de nuestro fondo
        initComponents();
        this.setLocationRelativeTo(null);//Centramos nuestro frame
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        analizarTexto = new javax.swing.JButton();
        primerCaballo = new javax.swing.JTextField();
        cuartoCaballo = new javax.swing.JTextField();
        segundoCaballo = new javax.swing.JTextField();
        sextoCaballo = new javax.swing.JTextField();
        tercerCaballo = new javax.swing.JTextField();
        quintoCaballo = new javax.swing.JTextField();
        octavoCaballo = new javax.swing.JTextField();
        septimoCaballo = new javax.swing.JTextField();
        novenoCaballo = new javax.swing.JTextField();
        decimoCaballo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        regresarOrden = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setOpaque(false);

        analizarTexto.setBackground(new java.awt.Color(51, 255, 204));
        analizarTexto.setFont(new java.awt.Font("Engravers MT", 0, 12)); // NOI18N
        analizarTexto.setForeground(new java.awt.Color(0, 0, 0));
        analizarTexto.setText("Ingresar Orden Y CALCULAR RESULTADOS");
        analizarTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizarTextoActionPerformed(evt);
            }
        });

        primerCaballo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                primerCaballoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                primerCaballoKeyTyped(evt);
            }
        });

        cuartoCaballo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cuartoCaballoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cuartoCaballoKeyTyped(evt);
            }
        });

        segundoCaballo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                segundoCaballoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                segundoCaballoKeyTyped(evt);
            }
        });

        sextoCaballo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sextoCaballoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sextoCaballoKeyTyped(evt);
            }
        });

        tercerCaballo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tercerCaballoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tercerCaballoKeyTyped(evt);
            }
        });

        quintoCaballo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quintoCaballoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quintoCaballoKeyTyped(evt);
            }
        });

        octavoCaballo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                octavoCaballoActionPerformed(evt);
            }
        });
        octavoCaballo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                octavoCaballoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                octavoCaballoKeyTyped(evt);
            }
        });

        septimoCaballo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                septimoCaballoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                septimoCaballoKeyTyped(evt);
            }
        });

        novenoCaballo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                novenoCaballoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                novenoCaballoKeyTyped(evt);
            }
        });

        decimoCaballo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                decimoCaballoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                decimoCaballoKeyTyped(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PosicionCaballo.png"))); // NOI18N

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PosicionCaballo.png"))); // NOI18N

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/C1.png"))); // NOI18N

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/C2.png"))); // NOI18N

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TextoPosicion.png"))); // NOI18N

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/C4.png"))); // NOI18N

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/C5.png"))); // NOI18N

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/C6.png"))); // NOI18N

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/C8.png"))); // NOI18N

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/C7.png"))); // NOI18N

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/C10.png"))); // NOI18N

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/C9.png"))); // NOI18N

        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/C3.png"))); // NOI18N

        regresarOrden.setBackground(new java.awt.Color(255, 0, 0));
        regresarOrden.setFont(new java.awt.Font("Engravers MT", 0, 12)); // NOI18N
        regresarOrden.setForeground(new java.awt.Color(0, 0, 0));
        regresarOrden.setText("Regresar");
        regresarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarOrdenActionPerformed(evt);
            }
        });

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PosicionCaballo.png"))); // NOI18N

        jLabel30.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PosicionCaballo.png"))); // NOI18N

        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PosicionCaballo.png"))); // NOI18N

        jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PosicionCaballo.png"))); // NOI18N

        jLabel33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PosicionCaballo.png"))); // NOI18N

        jLabel34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PosicionCaballo.png"))); // NOI18N

        jLabel35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PosicionCaballo.png"))); // NOI18N

        jLabel36.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PosicionCaballo.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(primerCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sextoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(188, 188, 188)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(septimoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(segundoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tercerCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(186, 186, 186))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(octavoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(novenoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(191, 191, 191))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(cuartoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(181, 181, 181)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(decimoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quintoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(194, 194, 194))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel23)))
                    .addComponent(regresarOrden))
                .addGap(92, 92, 92)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addGap(86, 86, 86)
                        .addComponent(jLabel24)
                        .addGap(96, 96, 96))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel31)
                                .addGap(144, 144, 144))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(jLabel27))
                .addGap(92, 92, 92)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(jLabel26))
                .addGap(0, 142, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(analizarTexto)
                .addGap(413, 413, 413))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jLabel32)
                        .addGap(153, 153, 153)
                        .addComponent(jLabel12)
                        .addGap(374, 374, 374)
                        .addComponent(jLabel29)
                        .addGap(145, 145, 145)
                        .addComponent(jLabel30))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(jLabel20))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jLabel36)
                        .addGap(142, 142, 142)
                        .addComponent(jLabel8)
                        .addGap(144, 144, 144)
                        .addComponent(jLabel33)
                        .addGap(153, 153, 153)
                        .addComponent(jLabel34)
                        .addGap(147, 147, 147)
                        .addComponent(jLabel35)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(regresarOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel31)
                                    .addComponent(jLabel30))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(primerCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(segundoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tercerCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(quintoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cuartoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27)
                    .addComponent(jLabel25))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel35))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel33)
                            .addComponent(jLabel34)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel36)
                            .addComponent(jLabel8))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sextoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(novenoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(septimoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decimoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(octavoCaballo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel20)
                .addGap(28, 28, 28)
                .addComponent(analizarTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void analizarTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizarTextoActionPerformed
        String c[] = new String[10];
        String orden[] = new String[10];
        boolean vacio = false;
        boolean ordenMal = false;
        c[0] = primerCaballo.getText();
        c[1] = segundoCaballo.getText();
        c[2] = tercerCaballo.getText();
        c[3] = cuartoCaballo.getText();
        c[4] = quintoCaballo.getText();
        c[5] = sextoCaballo.getText();
        c[6] = septimoCaballo.getText();
        c[7] = octavoCaballo.getText();
        c[8] = novenoCaballo.getText();
        c[9] = decimoCaballo.getText();
        for (int i = 0; i < 10; i++) {
            if (c[i].isEmpty()) {
                vacio = true;
            }
        }
        for (int i = 0; i < 10; i++) {//10(10)+10=110 pasos
            if (c[i].equals("1")) {
                orden[0] = "" + (i + 1);
            }
            if (c[i].equals("2")) {
                orden[1] = "" + (i + 1);
            }
            if (c[i].equals("3")) {
                orden[2] = "" + (i + 1);
            }
            if (c[i].equals("4")) {
                orden[3] = "" + (i + 1);
            }
            if (c[i].equals("5")) {
                orden[4] = "" + (i + 1);
            }
            if (c[i].equals("6")) {
                orden[5] = "" + (i + 1);
            }
            if (c[i].equals("7")) {
                orden[6] = "" + (i + 1);
            }
            if (c[i].equals("8")) {
                orden[7] = "" + (i + 1);
            }
            if (c[i].equals("9")) {
                orden[8] = "" + (i + 1);
            }
            if (c[i].equals("10")) {
                orden[9] = "" + (i + 1);
            }
        }
        if (vacio) {
            JOptionPane.showMessageDialog(null, "No puedes dejar posiciones de caballo en blanco");
        } else {
            for (int i = 0; i < 10; i++) {
                if (orden[i] == null) {
                    ordenMal = true;
                }
            }
            if (ordenMal) {
                JOptionPane.showMessageDialog(null, "Tienes posiciones repetidas");
            } else {
                double tiempoServicio3 = 0;
                int contadorDivision = 0;
                double segundosServicio3 = 0;
                int contadorPasosMayor = 0, contadorPasosMenor = 0, contadorPasosGeneral = 0, contadorTemporal;
                ordenDeCarrera[0] = new OrdenCarrera(Integer.parseInt(orden[0]), Integer.parseInt(orden[1]),
                        Integer.parseInt(orden[2]), Integer.parseInt(orden[3]), Integer.parseInt(orden[4]), Integer.parseInt(orden[5]),
                        Integer.parseInt(orden[6]), Integer.parseInt(orden[7]), Integer.parseInt(orden[8]), Integer.parseInt(orden[9]));
                for (int i = 0; i < apostadores.length; i++) {
                    long inicio = System.nanoTime();
                    contadorTemporal=0;
                    contadorTemporal=contadorTemporal+1;
                    if (apostadores[i] != null) {
                        contadorTemporal=contadorTemporal+10;
                        if (apostadores[i].getPrimero() == Integer.parseInt(orden[0])) {
                            apostadores[i].setPunteo(apostadores[i].getPunteo() + 10);
                            contadorTemporal=contadorTemporal+1;
                        }
                        if (apostadores[i].getSegundo() == Integer.parseInt(orden[1])) {
                            apostadores[i].setPunteo(apostadores[i].getPunteo() + 9);
                            contadorTemporal=contadorTemporal+1;
                        }
                        if (apostadores[i].getTercero() == Integer.parseInt(orden[2])) {
                            apostadores[i].setPunteo(apostadores[i].getPunteo() + 8);
                            contadorTemporal=contadorTemporal+1;
                        }
                        if (apostadores[i].getCuarto() == Integer.parseInt(orden[3])) {
                            apostadores[i].setPunteo(apostadores[i].getPunteo() + 7);
                            contadorTemporal=contadorTemporal+1;
                        }
                        if (apostadores[i].getQuinto() == Integer.parseInt(orden[4])) {
                            apostadores[i].setPunteo(apostadores[i].getPunteo() + 6);
                            contadorTemporal=contadorTemporal+1;
                        }
                        if (apostadores[i].getSexto() == Integer.parseInt(orden[5])) {
                            apostadores[i].setPunteo(apostadores[i].getPunteo() + 5);
                            contadorTemporal=contadorTemporal+1;
                        }
                        if (apostadores[i].getSeptimo() == Integer.parseInt(orden[6])) {
                            apostadores[i].setPunteo(apostadores[i].getPunteo() + 4);
                            contadorTemporal=contadorTemporal+1;
                        }
                        if (apostadores[i].getOctavo() == Integer.parseInt(orden[7])) {
                            apostadores[i].setPunteo(apostadores[i].getPunteo() + 3);
                            contadorTemporal=contadorTemporal+1;
                        }
                        if (apostadores[i].getNoveno() == Integer.parseInt(orden[8])) {
                            apostadores[i].setPunteo(apostadores[i].getPunteo() + 2);
                            contadorTemporal=contadorTemporal+1;
                        }
                        if (apostadores[i].getDecimo() == Integer.parseInt(orden[9])) {
                            apostadores[i].setPunteo(apostadores[i].getPunteo() + 1);
                            contadorTemporal=contadorTemporal+1;
                        }
                    }
                    if(apostadores[i]!=null){
                    long fin = System.nanoTime();
                    long total = fin - inicio;
                    tiempoServicio3 = tiempoServicio3 + total;
                    if(contadorPasosMayor<=contadorTemporal){
                        contadorPasosMayor=contadorTemporal;
                        if(contadorPasosMenor==0){
                            contadorPasosMenor=contadorPasosMayor;
                        }
                    }if(contadorTemporal<=contadorPasosMenor){
                        contadorPasosMenor=contadorTemporal;
                    } contadorPasosGeneral=contadorPasosGeneral+contadorTemporal;
                    contadorDivision++;
                    }
                }
                segundosServicio3=(tiempoServicio3/contadorDivision)/1000000000;
                movilizarServicios.setS3TiempoPromedio(segundosServicio3+" s");
                movilizarServicios.setS3MenorPasos(String.valueOf(contadorPasosMenor));
                movilizarServicios.setS3MayorPasos(String.valueOf(contadorPasosMayor));
                contadorPasosGeneral=contadorPasosGeneral/contadorDivision;
                movilizarServicios.setS3PromedioPasos(String.valueOf(contadorPasosGeneral));
                {
                }
                movilizar.setEntrarVerResultados(true);
                movilizar.setApuestaYaCerrada(false);
                movilizar.setEntrarVerificacion(false);
                guardarArchivo();
                this.dispose();
            }
        }
        
    }//GEN-LAST:event_analizarTextoActionPerformed
    public void guardarArchivo(){
        try {
            archivo = new File("GanadoresOrdenAlfabetico" + movilizar.getContadorResultadosObtenidos() + ".csv");
            subirResultados = new FileWriter(archivo);//5 pasos
            leerApuestaR = new BufferedWriter(subirResultados);
            imprimirArchivo = new PrintWriter(leerApuestaR);
            subirResultados.write("");
            Inicio.ordenarAlfabeticamente();
            for (int i = 0; i < apostadores.length; i++) {//O(n) pasos
                if (apostadores[i] != null) {//2 pasos
                    subirResultados.write("Nombre: " + apostadores[i].getNombre() + ", Monto"+apostadores[i].getMonto()+", Punteo: "+apostadores[i].getPunteo()+"\n");
                }
            }
            subirResultados.close();//2 pasos
            leerApuestaR.close();
            archivo = new File("GanadoresOrdenPunteo" + movilizar.getContadorResultadosObtenidos() + ".csv");//5 pasos
            subirResultados = new FileWriter(archivo);
            leerApuestaR = new BufferedWriter(subirResultados);
            imprimirArchivo = new PrintWriter(leerApuestaR);
            subirResultados.write("");
            Inicio.ordenarPunteo();
            for (int i = 0; i < apostadores.length; i++) {//O(n) pasos
                if (apostadores[i] != null) {//2
                    subirResultados.write("Nombre: " + apostadores[i].getNombre() + ", Monto"+apostadores[i].getMonto()+", Punteo: "+apostadores[i].getPunteo()+"\n");
                }
            }
            subirResultados.close();//2 pasos
            leerApuestaR.close();
            movilizar.setContadorResultadosObtenidos(movilizar.getContadorResultadosObtenidos()+1);
        } catch (IOException ex) {
            Logger.getLogger(ReescribirArchivo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    private void primerCaballoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_primerCaballoKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        if(primerCaballo.getText().length()>1){//restringimos que no puede escribir mas de 8 digitos
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "El digito ingresado puede tener solo 2 digitos");//Mensaje condicional digitos 
        }
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_primerCaballoKeyTyped

    private void primerCaballoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_primerCaballoKeyReleased
        try{
        if(primerCaballo.getText().length()==2){
            int valor=Integer.parseInt(primerCaballo.getText());
            if(valor>10){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puede ingresar un valor mayor a 10");//Mensaje condicional digitos 
            primerCaballo.setText("");
            }
        }
        if(primerCaballo.getText().length()==1){
            int valor=Integer.parseInt(primerCaballo.getText());
            if(valor==0){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir posicion cero");//Mensaje condicional digitos 
            primerCaballo.setText("");
            }
        }}catch(Exception e){
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "Caracter no reconocido");//Mensaje condicional digitos 
            primerCaballo.setText("");
        }
    }//GEN-LAST:event_primerCaballoKeyReleased

    private void cuartoCaballoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cuartoCaballoKeyReleased
        try{
        if(cuartoCaballo.getText().length()==2){
            int valor=Integer.parseInt(cuartoCaballo.getText());
            if(valor>10){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puede ingresar un valor mayor a 10");//Mensaje condicional digitos 
            cuartoCaballo.setText("");
            }
        }
        if(cuartoCaballo.getText().length()==1){
            int valor=Integer.parseInt(cuartoCaballo.getText());
            if(valor==0){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir posicion cero");//Mensaje condicional digitos 
            cuartoCaballo.setText("");
            }
        }}catch(Exception e){
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "Caracter no reconocido");//Mensaje condicional digitos 
            cuartoCaballo.setText("");
        }
    }//GEN-LAST:event_cuartoCaballoKeyReleased

    private void cuartoCaballoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cuartoCaballoKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        if(cuartoCaballo.getText().length()>1){//restringimos que no puede escribir mas de 8 digitos
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "El digito ingresado puede tener solo 2 digitos");//Mensaje condicional digitos 
        }
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_cuartoCaballoKeyTyped

    private void segundoCaballoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_segundoCaballoKeyReleased
        try{
        if(segundoCaballo.getText().length()==2){
            int valor=Integer.parseInt(segundoCaballo.getText());
            if(valor>10){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puede ingresar un valor mayor a 10");//Mensaje condicional digitos 
            segundoCaballo.setText("");
            }
        }
        if(segundoCaballo.getText().length()==1){
            int valor=Integer.parseInt(segundoCaballo.getText());
            if(valor==0){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir posicion cero");//Mensaje condicional digitos 
            segundoCaballo.setText("");
            }
        }}catch(Exception e){
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "Caracter no reconocido");//Mensaje condicional digitos 
            segundoCaballo.setText("");
        }
    }//GEN-LAST:event_segundoCaballoKeyReleased

    private void segundoCaballoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_segundoCaballoKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        if(segundoCaballo.getText().length()>1){//restringimos que no puede escribir mas de 8 digitos
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "El digito ingresado puede tener solo 2 digitos");//Mensaje condicional digitos pasaporte
        }
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_segundoCaballoKeyTyped

    private void sextoCaballoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sextoCaballoKeyReleased
        try{
        if(sextoCaballo.getText().length()==2){
            int valor=Integer.parseInt(sextoCaballo.getText());
            if(valor>10){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puede ingresar un valor mayor a 10");//Mensaje condicional digitos 
            sextoCaballo.setText("");
            }
        }
        if(sextoCaballo.getText().length()==1){
            int valor=Integer.parseInt(sextoCaballo.getText());
            if(valor==0){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir posicion cero");//Mensaje condicional digitos 
            sextoCaballo.setText("");
            }
        }}catch(Exception e){
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "Caracter no reconocido");//Mensaje condicional digitos 
            sextoCaballo.setText("");
        }
    }//GEN-LAST:event_sextoCaballoKeyReleased

    private void sextoCaballoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sextoCaballoKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        if(sextoCaballo.getText().length()>1){//restringimos que no puede escribir mas de 8 digitos
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "El digito ingresado puede tener solo 2 digitos");//Mensaje condicional digitos pasaporte
        }
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_sextoCaballoKeyTyped

    private void tercerCaballoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tercerCaballoKeyReleased
        try{
        if(tercerCaballo.getText().length()==2){
            int valor=Integer.parseInt(tercerCaballo.getText());
            if(valor>10){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puede ingresar un valor mayor a 10");//Mensaje condicional digitos 
            tercerCaballo.setText("");
            }
        }
        if(tercerCaballo.getText().length()==1){
            int valor=Integer.parseInt(tercerCaballo.getText());
            if(valor==0){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir posicion cero");//Mensaje condicional digitos 
            tercerCaballo.setText("");
            }
        }}catch(Exception e){
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "Caracter no reconocido");//Mensaje condicional digitos 
            tercerCaballo.setText("");
        }
    }//GEN-LAST:event_tercerCaballoKeyReleased

    private void tercerCaballoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tercerCaballoKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        if(tercerCaballo.getText().length()>1){//restringimos que no puede escribir mas de 8 digitos
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "El digito ingresado puede tener solo 2 digitos");//Mensaje condicional digitos pasaporte
        }
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_tercerCaballoKeyTyped

    private void quintoCaballoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quintoCaballoKeyReleased
        try{
        if(quintoCaballo.getText().length()==2){
            int valor=Integer.parseInt(quintoCaballo.getText());
            if(valor>10){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puede ingresar un valor mayor a 10");//Mensaje condicional digitos 
            quintoCaballo.setText("");
            }
        }
        if(quintoCaballo.getText().length()==1){
            int valor=Integer.parseInt(quintoCaballo.getText());
            if(valor==0){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir posicion cero");//Mensaje condicional digitos 
            quintoCaballo.setText("");
            }
        }}catch(Exception e){
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "Caracter no reconocido");//Mensaje condicional digitos 
            quintoCaballo.setText("");
        }
    }//GEN-LAST:event_quintoCaballoKeyReleased

    private void quintoCaballoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quintoCaballoKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        if(quintoCaballo.getText().length()>1){//restringimos que no puede escribir mas de 8 digitos
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "El digito ingresado puede tener solo 2 digitos");//Mensaje condicional digitos pasaporte
        }
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_quintoCaballoKeyTyped

    private void octavoCaballoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_octavoCaballoKeyReleased
        try{
        if(octavoCaballo.getText().length()==2){
            int valor=Integer.parseInt(octavoCaballo.getText());
            if(valor>10){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puede ingresar un valor mayor a 10");//Mensaje condicional digitos 
            octavoCaballo.setText("");
            }
        }
        if(octavoCaballo.getText().length()==1){
            int valor=Integer.parseInt(octavoCaballo.getText());
            if(valor==0){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir posicion cero");//Mensaje condicional digitos 
            octavoCaballo.setText("");
            }
        }}catch(Exception e){
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "Caracter no reconocido");//Mensaje condicional digitos 
            octavoCaballo.setText("");
        }
    }//GEN-LAST:event_octavoCaballoKeyReleased

    private void octavoCaballoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_octavoCaballoKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        if(octavoCaballo.getText().length()>1){//restringimos que no puede escribir mas de 8 digitos
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "El digito ingresado puede tener solo 2 digitos");//Mensaje condicional digitos pasaporte
        }
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_octavoCaballoKeyTyped

    private void septimoCaballoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_septimoCaballoKeyReleased
        try{
        if(septimoCaballo.getText().length()==2){
            int valor=Integer.parseInt(septimoCaballo.getText());
            if(valor>10){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puede ingresar un valor mayor a 10");//Mensaje condicional digitos 
            septimoCaballo.setText("");
            }
        }
        if(septimoCaballo.getText().length()==1){
            int valor=Integer.parseInt(septimoCaballo.getText());
            if(valor==0){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir posicion cero");//Mensaje condicional digitos 
            septimoCaballo.setText("");
            }
        }}catch(Exception e){
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "Caracter no reconocido");//Mensaje condicional digitos 
            septimoCaballo.setText("");
        }
    }//GEN-LAST:event_septimoCaballoKeyReleased

    private void septimoCaballoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_septimoCaballoKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        if(septimoCaballo.getText().length()>1){//restringimos que no puede escribir mas de 8 digitos
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "El digito ingresado puede tener solo 2 digitos");//Mensaje condicional digitos pasaporte
        }
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_septimoCaballoKeyTyped

    private void novenoCaballoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_novenoCaballoKeyReleased
        try{
        if(novenoCaballo.getText().length()==2){
            int valor=Integer.parseInt(novenoCaballo.getText());
            if(valor>10){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puede ingresar un valor mayor a 10");//Mensaje condicional digitos 
            novenoCaballo.setText("");
            }
        }
        if(novenoCaballo.getText().length()==1){
            int valor=Integer.parseInt(novenoCaballo.getText());
            if(valor==0){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir posicion cero");//Mensaje condicional digitos 
            novenoCaballo.setText("");
            }
        }}catch(Exception e){
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "Caracter no reconocido");//Mensaje condicional digitos 
            novenoCaballo.setText("");
        }
    }//GEN-LAST:event_novenoCaballoKeyReleased

    private void novenoCaballoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_novenoCaballoKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        if(novenoCaballo.getText().length()>1){//restringimos que no puede escribir mas de 8 digitos
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "El digito ingresado puede tener solo 2 digitos");//Mensaje condicional digitos pasaporte
        }
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_novenoCaballoKeyTyped

    private void decimoCaballoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_decimoCaballoKeyReleased
        try{
        if(decimoCaballo.getText().length()==2){
            int valor=Integer.parseInt(decimoCaballo.getText());
            if(valor>10){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puede ingresar un valor mayor a 10");//Mensaje condicional digitos 
            decimoCaballo.setText("");
            }
        }
        if(decimoCaballo.getText().length()==1){
            int valor=Integer.parseInt(decimoCaballo.getText());
            if(valor==0){
                evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir posicion cero");//Mensaje condicional digitos 
            decimoCaballo.setText("");
            }
        }}catch(Exception e){
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "Caracter no reconocido");//Mensaje condicional digitos 
            decimoCaballo.setText("");
        }
    }//GEN-LAST:event_decimoCaballoKeyReleased

    private void decimoCaballoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_decimoCaballoKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        if(decimoCaballo.getText().length()>1){//restringimos que no puede escribir mas de 8 digitos
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "El digito ingresado puede tener solo 2 digitos");//Mensaje condicional digitos pasaporte
        }
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_decimoCaballoKeyTyped

    private void octavoCaballoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_octavoCaballoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_octavoCaballoActionPerformed

    private void regresarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarOrdenActionPerformed
        this.dispose();
    }//GEN-LAST:event_regresarOrdenActionPerformed

    /**
     * @param args the command line arguments
     */
    class FondoInicio extends JPanel{//creamos una clase parametrica o generica extendiendo de JPanel
        private Image imagen;//establecemos que sea tipo imagen
        @Override//sobrescribimos la clase JPanel especificamente el metodo paint
        public void paint(Graphics g){ 
            imagen = new ImageIcon(getClass().getResource("/images/FondoSeleccion.jpg")).getImage();//igualamos nuestra variable al fondo que queremos
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);//damos las dimensiones
            setOpaque(false);//Ponemos que el panel no sea visible
            super.paint(g);//llamos a la clase super para que cumpla con las funcionalidades del JPanel
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analizarTexto;
    private javax.swing.JTextField cuartoCaballo;
    private javax.swing.JTextField decimoCaballo;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField novenoCaballo;
    private javax.swing.JTextField octavoCaballo;
    private javax.swing.JTextField primerCaballo;
    private javax.swing.JTextField quintoCaballo;
    private javax.swing.JButton regresarOrden;
    private javax.swing.JTextField segundoCaballo;
    private javax.swing.JTextField septimoCaballo;
    private javax.swing.JTextField sextoCaballo;
    private javax.swing.JTextField tercerCaballo;
    // End of variables declaration//GEN-END:variables
}
