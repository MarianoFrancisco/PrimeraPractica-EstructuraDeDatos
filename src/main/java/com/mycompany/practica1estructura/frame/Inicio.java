/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.practica1estructura.frame;


import static com.mycompany.practica1estructura.controladores.MovilizadorDatos.movilizar;
import static com.mycompany.practica1estructura.controladores.MovilizadorServicios.movilizarServicios;
import static com.mycompany.practica1estructura.frame.AnimacionCaballo.frameAnimacionCaballo;
import com.mycompany.practica1estructura.lectura_archivo.CargaArchivo;
import com.mycompany.practica1estructura.lectura_archivo.ExportarArchivo;
import com.mycompany.practica1estructura.lectura_archivo.ReescribirArchivo;
import com.mycompany.practica1estructura.objeto.Apostador;
import java.awt.Graphics;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.UndoManager;

/**
 *
 * @author Mariano
 */
public class Inicio extends javax.swing.JFrame {

    /**
     * Creates new form Inicio
     */
    //public static CrearListado listaApostadores = new CrearListado();
   File archivo;
   FileWriter apuestasRechazadas = null;
   BufferedWriter leerApuestaR = null;
   PrintWriter imprimirArchivo;
   public static Apostador[] apostadoresTemporal;
   public static Apostador[] apostadores;
   FondoInicio inicio = new FondoInicio();//Creamos un nuevo fondo
   protected UndoManager manager = new UndoManager();
    public Inicio() {
        this.setContentPane(inicio);//Realizamos la pintada de nuestro fondo
        initComponents();//iniciar componentes
        CargaArchivo.getDocument().addUndoableEditListener(manager);
        
        this.setLocationRelativeTo(null);//Centramos nuestro frame
    }
    //Creamos metodo para crear cargas
        
    public void abrirArchivo(){
        //filechooser para abrir o guardar archivos
        JFileChooser archivoEleccion = new JFileChooser();
        int eleccion = archivoEleccion.showOpenDialog(this);//variable para seleccionar
        //aprove option es si el usuario le da en aceptar
        if (eleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = archivoEleccion.getSelectedFile();//seleccionamos file para fileReader, agarramos el seleccionado
            movilizar.setDirectorio(archivo.getPath());
            try {
                //llamos la clase carga archivo e ingresamos parametros
                CargaArchivo.setText("");
                CargaArchivo carga = new CargaArchivo();
                carga.leer(archivo, CargaArchivo);
                CargaArchivo.setText(CargaArchivo.getText().substring(0,CargaArchivo.getText().length()-1));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error al leer carga de archivo");
                ex.printStackTrace();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        ImageIcon icon = new ImageIcon(getClass().getResource("/images/Inicio.jpg"));
        Image image = icon.getImage();
        jDesktopPane1 = new javax.swing.JDesktopPane(){public void paintComponent(Graphics g){ g.drawImage(image,0,0,getWidth(),getHeight(),this);
        }
    };
    jScrollPane1 = new javax.swing.JScrollPane();
    CargaArchivo = new javax.swing.JTextArea();
    jLabel5 = new javax.swing.JLabel();
    jPanel2 = new javax.swing.JPanel();
    jLabel9 = new javax.swing.JLabel();
    jLabel11 = new javax.swing.JLabel();
    jLabel12 = new javax.swing.JLabel();
    jLabel10 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    jPanel3 = new javax.swing.JPanel();
    jLabel13 = new javax.swing.JLabel();
    jLabel14 = new javax.swing.JLabel();
    jLabel15 = new javax.swing.JLabel();
    jLabel16 = new javax.swing.JLabel();
    verResultados = new javax.swing.JButton();
    cerrarApuestas = new javax.swing.JButton();
    verResultados1 = new javax.swing.JButton();
    cerrarApuestas1 = new javax.swing.JButton();
    conAnimacion = new javax.swing.JButton();
    sinAnimacion = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    abrirArchivo = new javax.swing.JMenuItem();
    nuevoArchivo = new javax.swing.JMenuItem();
    jMenu3 = new javax.swing.JMenu();
    guardar = new javax.swing.JMenuItem();
    guardarComo = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    copiar = new javax.swing.JMenuItem();
    pegar = new javax.swing.JMenuItem();
    deshacer = new javax.swing.JMenuItem();
    rehacer = new javax.swing.JMenuItem();
    jMenu5 = new javax.swing.JMenu();
    acercaDe = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Analizador USAC");

    jDesktopPane1.setBackground(new java.awt.Color(153, 255, 255));

    CargaArchivo.setColumns(20);
    CargaArchivo.setRows(5);
    jScrollPane1.setViewportView(CargaArchivo);

    jLabel5.setFont(new java.awt.Font("Engravers MT", 0, 18)); // NOI18N
    jLabel5.setForeground(new java.awt.Color(0, 0, 0));
    jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/subtitulo.png"))); // NOI18N

    jPanel2.setBackground(new java.awt.Color(0, 153, 255));
    jPanel2.setForeground(new java.awt.Color(255, 255, 255));

    jLabel9.setFont(new java.awt.Font("Engravers MT", 0, 36)); // NOI18N
    jLabel9.setForeground(new java.awt.Color(0, 0, 0));
    jLabel9.setText("C");

    jLabel11.setFont(new java.awt.Font("Engravers MT", 0, 36)); // NOI18N
    jLabel11.setForeground(new java.awt.Color(0, 0, 0));
    jLabel11.setText("S");

    jLabel12.setFont(new java.awt.Font("Engravers MT", 0, 36)); // NOI18N
    jLabel12.setForeground(new java.awt.Color(0, 0, 0));
    jLabel12.setText("A");

    jLabel10.setFont(new java.awt.Font("Engravers MT", 0, 36)); // NOI18N
    jLabel10.setForeground(new java.awt.Color(0, 0, 0));
    jLabel10.setText("U");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(21, 21, 21)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(3, 3, 3)))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel12)
                        .addComponent(jLabel11))))
            .addContainerGap(32, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addComponent(jLabel10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel11)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel12)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel9))
    );

    jLabel6.setFont(new java.awt.Font("Engravers MT", 0, 36)); // NOI18N
    jLabel6.setForeground(new java.awt.Color(0, 0, 0));
    jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/titulo.png"))); // NOI18N

    jPanel3.setBackground(new java.awt.Color(0, 153, 255));
    jPanel3.setForeground(new java.awt.Color(255, 255, 255));

    jLabel13.setFont(new java.awt.Font("Engravers MT", 0, 36)); // NOI18N
    jLabel13.setForeground(new java.awt.Color(0, 0, 0));
    jLabel13.setText("C");

    jLabel14.setFont(new java.awt.Font("Engravers MT", 0, 36)); // NOI18N
    jLabel14.setForeground(new java.awt.Color(0, 0, 0));
    jLabel14.setText("S");

    jLabel15.setFont(new java.awt.Font("Engravers MT", 0, 36)); // NOI18N
    jLabel15.setForeground(new java.awt.Color(0, 0, 0));
    jLabel15.setText("A");

    jLabel16.setFont(new java.awt.Font("Engravers MT", 0, 36)); // NOI18N
    jLabel16.setForeground(new java.awt.Color(0, 0, 0));
    jLabel16.setText("U");

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(21, 21, 21)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(3, 3, 3)))
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(jLabel15))
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(6, 6, 6)
                    .addComponent(jLabel14)))
            .addContainerGap(20, Short.MAX_VALUE))
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addComponent(jLabel16)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel14)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel15)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel13))
    );

    verResultados.setBackground(new java.awt.Color(0, 255, 0));
    verResultados.setFont(new java.awt.Font("Engravers MT", 0, 12)); // NOI18N
    verResultados.setForeground(new java.awt.Color(0, 0, 0));
    verResultados.setText("Ver resutaldos de carrera");
    verResultados.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            verResultadosActionPerformed(evt);
        }
    });

    cerrarApuestas.setBackground(new java.awt.Color(255, 51, 0));
    cerrarApuestas.setFont(new java.awt.Font("Engravers MT", 0, 12)); // NOI18N
    cerrarApuestas.setForeground(new java.awt.Color(0, 0, 0));
    cerrarApuestas.setText("Cerrar apuestas");
    cerrarApuestas.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cerrarApuestasActionPerformed(evt);
        }
    });

    verResultados1.setBackground(new java.awt.Color(0, 255, 0));
    verResultados1.setFont(new java.awt.Font("Engravers MT", 0, 12)); // NOI18N
    verResultados1.setForeground(new java.awt.Color(0, 0, 0));
    verResultados1.setText("Ver reportes");
    verResultados1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            verResultados1ActionPerformed(evt);
        }
    });

    cerrarApuestas1.setBackground(new java.awt.Color(0, 205, 255));
    cerrarApuestas1.setFont(new java.awt.Font("Engravers MT", 0, 12)); // NOI18N
    cerrarApuestas1.setForeground(new java.awt.Color(0, 0, 0));
    cerrarApuestas1.setText("Verificacion de Apuestas");
    cerrarApuestas1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cerrarApuestas1ActionPerformed(evt);
        }
    });

    conAnimacion.setBackground(new java.awt.Color(255, 131, 2));
    conAnimacion.setFont(new java.awt.Font("Engravers MT", 0, 12)); // NOI18N
    conAnimacion.setForeground(new java.awt.Color(0, 0, 0));
    conAnimacion.setText("Con animacion");
    conAnimacion.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            conAnimacionActionPerformed(evt);
        }
    });

    sinAnimacion.setBackground(new java.awt.Color(255, 126, 0));
    sinAnimacion.setFont(new java.awt.Font("Engravers MT", 0, 12)); // NOI18N
    sinAnimacion.setForeground(new java.awt.Color(0, 0, 0));
    sinAnimacion.setText("Sin Animacion");
    sinAnimacion.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            sinAnimacionActionPerformed(evt);
        }
    });

    jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(verResultados, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(cerrarApuestas, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(verResultados1, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(cerrarApuestas1, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(conAnimacion, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(sinAnimacion, javax.swing.JLayeredPane.DEFAULT_LAYER);

    javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
    jDesktopPane1.setLayout(jDesktopPane1Layout);
    jDesktopPane1Layout.setHorizontalGroup(
        jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jDesktopPane1Layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(jLabel5)
            .addGap(435, 435, 435))
        .addGroup(jDesktopPane1Layout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addComponent(verResultados1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(verResultados, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(139, 139, 139)
                    .addComponent(cerrarApuestas1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(213, 213, 213))
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jDesktopPane1Layout.createSequentialGroup()
                            .addGap(120, 120, 120)
                            .addComponent(jLabel6))
                        .addGroup(jDesktopPane1Layout.createSequentialGroup()
                            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addGap(47, 47, 47)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(cerrarApuestas, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 858, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addGap(56, 56, 56)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sinAnimacion)
                                        .addComponent(conAnimacion))))))
                    .addContainerGap(11, Short.MAX_VALUE))))
    );
    jDesktopPane1Layout.setVerticalGroup(
        jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jDesktopPane1Layout.createSequentialGroup()
            .addComponent(jLabel6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel5)
            .addGap(18, 18, 18)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(51, 51, 51)
                    .addComponent(conAnimacion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(33, 33, 33)
                    .addComponent(sinAnimacion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(50, 50, 50)
                    .addComponent(cerrarApuestas, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(18, 18, 18)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(cerrarApuestas1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(verResultados1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(verResultados, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)))
            .addContainerGap(22, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("Ingreso de Apuestas", jDesktopPane1);

    jMenu1.setText("Abrir");

    abrirArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    abrirArchivo.setText("Abrir Archivo");
    abrirArchivo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            abrirArchivoActionPerformed(evt);
        }
    });
    jMenu1.add(abrirArchivo);

    nuevoArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    nuevoArchivo.setText("Nuevo Archivo");
    nuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            nuevoArchivoActionPerformed(evt);
        }
    });
    jMenu1.add(nuevoArchivo);

    jMenuBar1.add(jMenu1);

    jMenu3.setText("Guardar");

    guardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    guardar.setText("Guardar");
    guardar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            guardarActionPerformed(evt);
        }
    });
    jMenu3.add(guardar);

    guardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    guardarComo.setText("Guardar Como");
    guardarComo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            guardarComoActionPerformed(evt);
        }
    });
    jMenu3.add(guardarComo);

    jMenuBar1.add(jMenu3);

    jMenu2.setText("Herramientas");

    copiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    copiar.setText("Copiar");
    copiar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            copiarActionPerformed(evt);
        }
    });
    jMenu2.add(copiar);

    pegar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    pegar.setText("Pegar");
    pegar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            pegarActionPerformed(evt);
        }
    });
    jMenu2.add(pegar);

    deshacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    deshacer.setText("Deshacer");
    deshacer.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deshacerActionPerformed(evt);
        }
    });
    jMenu2.add(deshacer);

    rehacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    rehacer.setText("Rehacer");
    rehacer.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rehacerActionPerformed(evt);
        }
    });
    jMenu2.add(rehacer);

    jMenuBar1.add(jMenu2);

    jMenu5.setText("Información");

    acercaDe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    acercaDe.setText("Acerca de Analizador USAC");
    acercaDe.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            acercaDeActionPerformed(evt);
        }
    });
    jMenu5.add(acercaDe);

    jMenuBar1.add(jMenu5);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1273, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents


    private void abrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoActionPerformed
        if(movilizar.getDirectorio().length()==0&&CargaArchivo.getText().length()>0){
            JOptionPane.showMessageDialog(null, "Tienes un archivo sin guardar, si cargas uno se perderá");
            abrirArchivo();
        }else if(movilizar.getDirectorio().length()>0){
            FileReader leerA = null;
            try {
                leerA = new FileReader(movilizar.getDirectorio()); //ingresamos archivo
                BufferedReader leerTA = new BufferedReader(leerA);//lector del archivo}
                String archivoLeido= leerTA.lines().collect(Collectors.joining());//leer string
                if(archivoLeido.equals(CargaArchivo.getText())){
                    abrirArchivo();
                }else{
                    JOptionPane.showMessageDialog(null, "Tienes un archivo sin guardar, si cargas uno se perderá");
                    abrirArchivo();
                }
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    leerA.close();
                } catch (IOException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else{
            abrirArchivo();
        }
        
    }//GEN-LAST:event_abrirArchivoActionPerformed
    
    class FondoInicio extends JPanel{//creamos una clase parametrica o generica extendiendo de JPanel
        private Image imagen;//establecemos que sea tipo imagen
        @Override//sobrescribimos la clase JPanel especificamente el metodo paint
        public void paint(Graphics g){ 
            imagen = new ImageIcon(getClass().getResource("/images/fondoOscuro.jpg")).getImage();//igualamos nuestra variable al fondo que queremos
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);//damos las dimensiones
            setOpaque(false);//Ponemos que el panel no sea visible
            super.paint(g);//llamos a la clase super para que cumpla con las funcionalidades del JPanel
        }
    }
    private void nuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoArchivoActionPerformed
        if(movilizar.getDirectorio().length()==0&&CargaArchivo.getText().length()==0){
            JOptionPane.showMessageDialog(null, "Ya está en un nuevo archivo");
        }else if(movilizar.getDirectorio().length()==0&&CargaArchivo.getText().length()>0){
            java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            new VerificarCambios().setVisible(true);
                        }
                    });
        }
            else{
            FileReader leerA = null;
            try {
                leerA = new FileReader(movilizar.getDirectorio()); //ingresamos archivo
                BufferedReader leerTA = new BufferedReader(leerA);//lector del archivo}
                String archivoLeido= leerTA.lines().collect(Collectors.joining());//leer string
                if(archivoLeido.equals(CargaArchivo.getText())){
                    
                    CargaArchivo.setText("");
                    movilizar.setDirectorio("");
                }else{
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            new VerificarCambios().setVisible(true);
                        }
                    });
                }
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    leerA.close();
                } catch (IOException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_nuevoArchivoActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        ReescribirArchivo.reescribir(CargaArchivo);
    }//GEN-LAST:event_guardarActionPerformed

    private void guardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarComoActionPerformed
        ExportarArchivo.exportarArchivo(CargaArchivo);//enviamos parametro para guardar archivo texto
    }//GEN-LAST:event_guardarComoActionPerformed

    private void acercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acercaDeActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreadorInformacion().setVisible(true);
            }
        });
    }//GEN-LAST:event_acercaDeActionPerformed

    private void rehacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rehacerActionPerformed
        try {
            manager.redo();
        } catch (CannotRedoException cre) {
            JOptionPane.showMessageDialog(null, "No has hecho nada por lo tanto no puedes regresar");
        }
    }//GEN-LAST:event_rehacerActionPerformed

    private void deshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deshacerActionPerformed
        try {
            manager.undo();
        } catch (CannotRedoException cre) {
            JOptionPane.showMessageDialog(null, "No hay datos para procesar posteriormente");
        }

    }//GEN-LAST:event_deshacerActionPerformed

    private void pegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pegarActionPerformed
        CargaArchivo.paste();
    }//GEN-LAST:event_pegarActionPerformed

    private void copiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiarActionPerformed
        CargaArchivo.copy();
    }//GEN-LAST:event_copiarActionPerformed

    private void cerrarApuestasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarApuestasActionPerformed
        //creamos variables
        if (movilizar.isApuestaYaCerrada()) {
            JOptionPane.showMessageDialog(null, "Tienes una apuesta ya cerrada");
        } else {
            String linea;
            int contador = 0;
            String texto = CargaArchivo.getText();
            int limite = CargaArchivo.getLineCount();
            apostadoresTemporal = new Apostador[limite];
            //convertimos el texto para lectura
            Reader leer = new StringReader(texto);
            BufferedReader leerTA = new BufferedReader(leer);
            //escribir apuestas rechazadas
            try {
                archivo = new File("ApuestasRechazadas" + movilizar.getContadorApuestaRechazada() + ".csv");
                apuestasRechazadas = new FileWriter(archivo);
                leerApuestaR = new BufferedWriter(apuestasRechazadas);
                imprimirArchivo = new PrintWriter(leerApuestaR);
                apuestasRechazadas.write("");

            } catch (IOException ex) {
                Logger.getLogger(ReescribirArchivo.class.getName()).log(Level.SEVERE, null, ex);
            }
            boolean verificador = true;
            try {
                //mientras existe linea leera
                while ((linea = leerTA.readLine()) != null) {//o(n) pasos
                    if (linea.length() > 0) {//2 pasos
                        String[] espacio = linea.split(",");//1 paso
                        if (espacio.length == 12) {
                            try {
                                double a = Double.parseDouble(espacio[1].replaceAll(" ", ""));//10 pasos
                                int b = Integer.parseInt(espacio[2].replaceAll(" ", ""));
                                int c = Integer.parseInt(espacio[3].replaceAll(" ", ""));
                                int d = Integer.parseInt(espacio[4].replaceAll(" ", ""));
                                int e = Integer.parseInt(espacio[5].replaceAll(" ", ""));
                                int f = Integer.parseInt(espacio[6].replaceAll(" ", ""));
                                int g = Integer.parseInt(espacio[7].replaceAll(" ", ""));
                                int h = Integer.parseInt(espacio[8].replaceAll(" ", ""));
                                int i = Integer.parseInt(espacio[9].replaceAll(" ", ""));
                                int j = Integer.parseInt(espacio[10].replaceAll(" ", ""));
                                int k = Integer.parseInt(espacio[11].replaceAll(" ", ""));
                                apostadoresTemporal[contador] = (new Apostador(espacio[0],//1paso
                                        a, b,
                                        c, d,
                                        e, f,
                                        g, h,
                                        i, j,
                                        k, Integer.parseInt("0")));
                                contador++;//1 paso
                            } catch (NumberFormatException e) {
                                verificador = false;
                                apuestasRechazadas.write("Apuesta: " + linea + " rechazada por caracteres incorrecto en el apartado de posiciones \n");
                            }
                        } else {
                            verificador = false;
                            apuestasRechazadas.write("Apuesta: " + linea + " rechazada por no contar con todos los campos solicitados \n");
                            //Character.is(espacio[0]);
                        }
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (apostadoresTemporal[0] != null) {
                movilizar.setApuestaYaCerrada(true);
            } else {
                JOptionPane.showMessageDialog(null, "Ninguna apuesta cumple con la estructura establecida");
            }
        }
    }//GEN-LAST:event_cerrarApuestasActionPerformed

    private void verResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verResultadosActionPerformed
        if(movilizar.isEntrarVerResultados()){
            ordenarPunteo();
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new VerResultados().setVisible(true);
                }
            });
        }else{
            JOptionPane.showMessageDialog(null,"No se ha realizado ninguna carrera");
        }
    }//GEN-LAST:event_verResultadosActionPerformed

    private void verResultados1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verResultados1ActionPerformed
        if(movilizar.isEntrarVerResultados()){
            java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        new Reportes().setVisible(true);
                    }

                });
        }else{
            JOptionPane.showMessageDialog(null, "No se ha realizado ningun procedimiento de apuesta");
        }
        
    }//GEN-LAST:event_verResultados1ActionPerformed

    private void cerrarApuestas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarApuestas1ActionPerformed
        double tiempoServicio2=0;
        int contadorDivision=0;
        double segundosServicio2=0;
        int contadorPasosMayor=0,contadorPasosMenor=0,contadorPasosGeneral=0,contadorTemporal;
        if (movilizar.isApuestaYaCerrada() == false) {
            JOptionPane.showMessageDialog(null, "Primero debes cerrar una apuesta");
        } else {
            if (movilizar.isEntrarVerificacion()) {
                if (apostadores[0] != null) {
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            new SeleccionarOrdenApuesta().setVisible(true);
                        }
                    });
                } else {
                    JOptionPane.showMessageDialog(null, "No puedes seleccionar posicion por que no hay apuestas validas");
                }
            } else {
                if(movilizar.isVerAnimacion()==true){
                    AnimacionCaballo.iniciarCarrera();
                    frameAnimacionCaballo.setVisible(true);
                }
                int contador = 0;
                String espacio[] = new String[10];
                apostadores = new Apostador[apostadoresTemporal.length];
                
                for (int i = 0; i < apostadoresTemporal.length; i++) {// complejidad o(n)
                    contadorTemporal=0;
                    long inicio = System.nanoTime();
                    boolean verificador = true;
                    contadorTemporal=contadorTemporal+2;//2 pasos
                    if (apostadoresTemporal[i] != null) {//10 pasos
                        contadorTemporal=contadorTemporal+10;
                        espacio[0] = String.valueOf(apostadoresTemporal[i].getPrimero());
                        espacio[1] = String.valueOf(apostadoresTemporal[i].getSegundo());
                        espacio[2] = String.valueOf(apostadoresTemporal[i].getTercero());
                        espacio[3] = String.valueOf(apostadoresTemporal[i].getCuarto());
                        espacio[4] = String.valueOf(apostadoresTemporal[i].getQuinto());
                        espacio[5] = String.valueOf(apostadoresTemporal[i].getSexto());
                        espacio[6] = String.valueOf(apostadoresTemporal[i].getSeptimo());
                        espacio[7] = String.valueOf(apostadoresTemporal[i].getOctavo());
                        espacio[8] = String.valueOf(apostadoresTemporal[i].getNoveno());
                        espacio[9] = String.valueOf(apostadoresTemporal[i].getDecimo());
                        for (int j = 0; j < 9; j++) {//9,8,7,6,5,4,3,2,2 pasos
                            contadorTemporal=contadorTemporal+1;
                            if (espacio[j].equals(espacio[j + 1])) {
                                verificador = false;
                                contadorTemporal=contadorTemporal+2;
                                break;
                            }
                            if (j < 8) {
                                contadorTemporal=contadorTemporal+1;
                                if (espacio[j].equals(espacio[j + 2])) {
                                    verificador = false;
                                    contadorTemporal=contadorTemporal+2;
                                    break;
                                }
                            }
                            if (j < 7) {
                                contadorTemporal=contadorTemporal+1;
                                if (espacio[j].equals(espacio[j + 3])) {
                                    verificador = false;
                                    contadorTemporal=contadorTemporal+2;
                                    break;
                                }
                            }
                            if (j < 6) {
                                contadorTemporal=contadorTemporal+1;
                                if (espacio[j].equals(espacio[j + 4])) {
                                    verificador = false;
                                    contadorTemporal=contadorTemporal+2;
                                    break;
                                }
                            }
                            if (j < 5) {
                                contadorTemporal=contadorTemporal+1;
                                if (espacio[j].equals(espacio[j + 5])) {
                                    verificador = false;
                                    contadorTemporal=contadorTemporal+2;
                                    break;
                                }
                            }
                            if (j < 4) {
                                contadorTemporal=contadorTemporal+1;
                                if (espacio[j].equals(espacio[j + 6])) {
                                    verificador = false;
                                    contadorTemporal=contadorTemporal+2;
                                    break;
                                }
                            }
                            if (j < 3) {
                                contadorTemporal=contadorTemporal+1;
                                if (espacio[j].equals(espacio[j + 7])) {
                                    verificador = false;
                                    contadorTemporal=contadorTemporal+2;
                                    break;
                                }
                            }
                            if (j < 2) {
                                contadorTemporal=contadorTemporal+1;
                                if (espacio[j].equals(espacio[j + 8])) {
                                    verificador = false;
                                    contadorTemporal=contadorTemporal+2;
                                    break;
                                }
                            }
                            if (j < 1) {
                                contadorTemporal=contadorTemporal+1;
                                if (espacio[j].equals(espacio[j + 9])) {
                                    verificador = false;
                                    contadorTemporal=contadorTemporal+2;
                                    break;
                                }
                            }
                        }
                        if (verificador == false) {
                            try {
                                contadorTemporal=contadorTemporal+2;
                                apuestasRechazadas.write("Apuesta: " + apostadoresTemporal[i].toString() + " rechazada por repitencia en posiciones de caballos \n");
                            } catch (IOException ex) {
                                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }contadorTemporal=contadorTemporal+2;
                        if (verificador) {//3 pasos
                            apostadores[contador] = apostadoresTemporal[i];
                            contador++;
                        }
                    }
                    
                   
                    if(apostadoresTemporal[i]!=null){
                    long fin = System.nanoTime();
                    long total = fin - inicio;
                    tiempoServicio2 = tiempoServicio2 + total;
                    
                    if(contadorPasosMayor<=contadorTemporal){
                        contadorPasosMayor=contadorTemporal;
                        if(contadorPasosMenor==0){
                            contadorPasosMenor=contadorPasosMayor;
                        }
                    }if(contadorTemporal<=contadorPasosMenor){
                        contadorPasosMenor=contadorTemporal;
                    } contadorPasosGeneral=contadorPasosGeneral+contadorTemporal;
                    contadorDivision++;
                    }
                    
                }segundosServicio2=(tiempoServicio2/contadorDivision)/1000000000;
                movilizarServicios.setS2TiempoPromedio(segundosServicio2+" s");
                movilizarServicios.setS2MenorPasos(String.valueOf(contadorPasosMenor));
                movilizarServicios.setS2MayorPasos(String.valueOf(contadorPasosMayor));
                contadorPasosGeneral=contadorPasosGeneral/contadorDivision;
                movilizarServicios.setS2PromedioPasos(String.valueOf(contadorPasosGeneral));
                try {
                    if (apostadores[0] != null) {
                        apuestasRechazadas.close();
                        leerApuestaR.close();
                        movilizar.setContadorApuestaRechazada(movilizar.getContadorApuestaRechazada() + 1);
                        movilizar.setEntrarVerificacion(true);
                        if (movilizar.isVerAnimacion() == false) {
                            java.awt.EventQueue.invokeLater(new Runnable() {
                                public void run() {
                                    new SeleccionarOrdenApuesta().setVisible(true);
                                }
                            });
                        }
                    } else {
                        movilizar.setApuestaYaCerrada(false);
                        JOptionPane.showMessageDialog(null, "No puedes seleccionar posicion por que no hay apuestas validas, se dio apertura a otras apuestas");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_cerrarApuestas1ActionPerformed

    private void conAnimacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conAnimacionActionPerformed
        movilizar.setVerAnimacion(true);
    }//GEN-LAST:event_conAnimacionActionPerformed

    private void sinAnimacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinAnimacionActionPerformed
        movilizar.setVerAnimacion(false);
    }//GEN-LAST:event_sinAnimacionActionPerformed
    public static void ordenarAlfabeticamente() {//O(n^2)
        Apostador temp[] = new Apostador[1];//3 pasos
        boolean finalizar = true;
        boolean ordenar;
        double tiempoServicio4=0;
        int contadorDivision=0;
        double segundosServicio4=0;
        int contadorPasosMayor=0,contadorPasosMenor=0,contadorPasosGeneral=0,contadorTemporal;
        //alfabetico
        
        for (ordenar = false; !ordenar;) {//indificamos que cuando sea true termine, n pasos
            long inicio = System.nanoTime();
            contadorTemporal=0;
            for (int i = 0; i < apostadores.length - 1; i++) {//n pasos
                contadorTemporal=contadorTemporal+1;
                if (apostadores[i] != null && apostadores[i + 1] != null) {//1 paso
                    contadorTemporal=contadorTemporal+1;
                    if (apostadores[i].getNombre().compareToIgnoreCase(apostadores[i + 1].getNombre()) > 0) {//5 pasos
                        contadorTemporal=contadorTemporal+4;
                        temp[0] = apostadores[i + 1];//intercambiamos posiciones
                        apostadores[i + 1] = apostadores[i];
                        apostadores[i] = temp[0];
                        finalizar = false;
                    }
                }
            }
            contadorTemporal=contadorTemporal+1;
            if (finalizar) {//2 pasos
                ordenar = true;
            }
            long fin = System.nanoTime();
            long total = fin - inicio;
            tiempoServicio4 = tiempoServicio4 + total;
            if (contadorPasosMayor <= contadorTemporal) {
                contadorPasosMayor = contadorTemporal;
                if (contadorPasosMenor == 0) {
                    contadorPasosMenor = contadorPasosMayor;
                }
            }
            if (contadorTemporal <= contadorPasosMenor) {
                contadorPasosMenor = contadorTemporal;
            }
            contadorPasosGeneral = contadorPasosGeneral + contadorTemporal;
            contadorDivision++;
            finalizar = true;//1 paso
        }
        segundosServicio4 = (tiempoServicio4 / contadorDivision) / 1000000000;
        movilizarServicios.setS4TiempoPromedio(segundosServicio4 + " s");
        movilizarServicios.setS4MenorPasos(String.valueOf(contadorPasosMenor));
        movilizarServicios.setS4MayorPasos(String.valueOf(contadorPasosMayor));
        contadorPasosGeneral = contadorPasosGeneral / contadorDivision;
        movilizarServicios.setS4PromedioPasos(String.valueOf(contadorPasosGeneral));
    }
    
    public static void ordenarPunteo(){//O(n^2)
        Apostador temp[] = new Apostador[1];//3 pasos
        boolean finalizar = true;
        boolean ordenar;
        double tiempoServicio4=0;
        int contadorDivision=0;
        double segundosServicio4=0;
        int contadorPasosMayor=0,contadorPasosMenor=0,contadorPasosGeneral=0,contadorTemporal;
        //mayor a menor
        for (ordenar = false; !ordenar;) {//indificamos que cuando sea true termine, n pasos
            long inicio = System.nanoTime();
            contadorTemporal=0;
            for (int i = 0; i < apostadores.length - 1; i++) {//n pasos
                contadorTemporal=contadorTemporal+1;
                if (apostadores[i] != null && apostadores[i + 1] != null) {//1 paso
                    contadorTemporal=contadorTemporal+1;
                    if (apostadores[i].getPunteo() < apostadores[i + 1].getPunteo()) {//5 pasos
                        contadorTemporal=contadorTemporal+4;
                        temp[0] = apostadores[i + 1];//intercambiamos posiciones
                        apostadores[i + 1] = apostadores[i];
                        apostadores[i] = temp[0];
                        finalizar = false;
                    }
                }
            }
            contadorTemporal=contadorTemporal+1;
            if (finalizar) {//2 pasos
                ordenar = true;
            }
            long fin = System.nanoTime();
            long total = fin - inicio;
            tiempoServicio4 = tiempoServicio4 + total;
            if (contadorPasosMayor <= contadorTemporal) {
                contadorPasosMayor = contadorTemporal;
                if (contadorPasosMenor == 0) {
                    contadorPasosMenor = contadorPasosMayor;
                }
            }
            if (contadorTemporal <= contadorPasosMenor) {
                contadorPasosMenor = contadorTemporal;
            }
            contadorPasosGeneral = contadorPasosGeneral + contadorTemporal;
            contadorDivision++;
            finalizar = true;//1 paso
        }
        segundosServicio4 = (tiempoServicio4 / contadorDivision) / 1000000000;
        movilizarServicios.setS4TiempoPromedio(segundosServicio4 + " s");
        movilizarServicios.setS4MenorPasos(String.valueOf(contadorPasosMenor));
        movilizarServicios.setS4MayorPasos(String.valueOf(contadorPasosMayor));
        contadorPasosGeneral = contadorPasosGeneral / contadorDivision;
        movilizarServicios.setS4PromedioPasos(String.valueOf(contadorPasosGeneral));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextArea CargaArchivo;
    private javax.swing.JMenuItem abrirArchivo;
    private javax.swing.JMenuItem acercaDe;
    private javax.swing.JButton cerrarApuestas;
    private javax.swing.JButton cerrarApuestas1;
    private javax.swing.JButton conAnimacion;
    private javax.swing.JMenuItem copiar;
    private javax.swing.JMenuItem deshacer;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JMenuItem guardarComo;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem nuevoArchivo;
    private javax.swing.JMenuItem pegar;
    private javax.swing.JMenuItem rehacer;
    private javax.swing.JButton sinAnimacion;
    private javax.swing.JButton verResultados;
    private javax.swing.JButton verResultados1;
    // End of variables declaration//GEN-END:variables
}
